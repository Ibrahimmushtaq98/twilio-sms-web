{"version":3,"sources":["context/AuthenticationProvider.jsx","hook/useGetTwilioAccount.js","component/ErrorLabel/ErrorLabel.jsx","component/DefaultLayout/DefaultLayout.jsx","component/AuthenticationPage/AuthenticationPageView.jsx","component/AuthenticationPage/AuthenticationPage.jsx","component/MessagesPage/MessagesPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AuthenticationReadContext","React","createContext","AuthenticationWriteContext","useAuthentication","useContext","AuthenticationProvider","children","useState","value","setValue","Provider","v","useGetTwilioAccount","onSuccess","onError","onComplete","accountSid","authToken","url","axios","get","auth","username","password","then","response","catch","error","ErrorLabel","className","style","padding","margin","Error","name","message","String","DefaultLayout","history","useHistory","onClick","push","href","target","GithubOutlined","marginTop","AuthenticationPageView","accountInfo","loading","onAccountSidChange","onAuthTokenChange","onSubmit","AccountDetails","Object","keys","length","type","status","dateCreated","dateUpdated","loadingClass","onChange","e","disabled","placeholder","AuthenticationPage","setAccountInfo","authentication","setAuthentication","setAccountSid","setAuthToken","setLoading","setError","getTwilioAccount","info","data","friendly_name","date_created","date_updated","err","event","preventDefault","MessagesPage","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.012fd8dd.chunk.js","sourcesContent":["import React, {useContext, useState} from \"react\";\n\nconst AuthenticationReadContext = React.createContext({})\nconst AuthenticationWriteContext = React.createContext(() => {})\n\nexport const useAuthentication = () => {\n  const value = useContext(AuthenticationReadContext)\n  const setValue = useContext(AuthenticationWriteContext)\n  return [value, setValue]\n}\n\nexport const AuthenticationProvider = ({children}) => {\n  const [value, setValue] = useState({})\n  return (\n    <AuthenticationReadContext.Provider value={value}>\n      <AuthenticationWriteContext.Provider value={v => setValue(v)}>\n        {children}\n      </AuthenticationWriteContext.Provider>\n    </AuthenticationReadContext.Provider>\n  )\n}\n","import axios from \"axios\";\n\nconst useGetTwilioAccount = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n  const getAccount = ({accountSid, authToken}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}.json`\n    axios.get(url,\n      {\n        auth: { username: accountSid, password: authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getAccount\n}\n\nexport default useGetTwilioAccount","const ErrorLabel = ({error}) => {\n  const toString = () => {\n    if (error instanceof Error) {\n      return `${error.name}: ${error.message}`\n    }\n    return `Error: ${String(error)}`\n  }\n\n  if (error) {\n    return <span className=\"label label-error\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {toString(error)}\n    </span>\n  }\n\n  return null\n}\n\nexport default ErrorLabel","import { GithubOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\n\nconst DefaultLayout = ({children}) => {\n  const history = useHistory()\n\n  const navigateToAuthenticationPage = () => {\n    history.push('/authentication')\n  }\n  const navigateToPhoneNumbersPage = () => {\n    history.push('/phone-numbers')\n  }\n\n  return (\n    <>\n      <div className=\"container grid-lg\">\n        <header className=\"navbar bg-primary\" style={{padding: '.5em'}}>\n          <section className=\"navbar-section\">\n            <span className=\"btn btn-link text-light\" onClick={navigateToAuthenticationPage}>Authentication</span>\n            <span className=\"btn btn-link text-light\" onClick={navigateToPhoneNumbersPage}>Messages</span>\n          </section>\n          <section className=\"navbar-center\">\n            <span className=\"h5\">Twilio SMS Web</span>\n          </section>\n          <section className=\"navbar-section\">\n            <a className=\"btn btn-link text-light\" href=\"https://github.com/rafasantos/twilio-sms-web\" target=\"_blank\">\n              GitHub <GithubOutlined/>\n            </a>\n          </section>\n        </header>\n      </div>\n      <div className=\"container grid-lg text-left\" style={{marginTop: '1em'}}>\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default DefaultLayout","import ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\n\nconst AuthenticationPageView = ({ accountInfo = {},\n                                  accountSid = '',\n                                  authToken = '',\n                                  error = null,\n                                  loading = false,\n                                  onAccountSidChange = () => {},\n                                  onAuthTokenChange = () => {},\n                                  onSubmit = () => {} }) => {\n\n  const AccountDetails = () => {\n    if (Object.keys(accountInfo).length === 0) return null\n    return (\n      <div className=\"flex-centered\">\n        <div className=\"card\">\n          <div className=\"card-header bg-success\">\n            <h6>Authentication Success</h6>\n          </div>\n          <div className=\"card-body\">\n            <span className=\"text-bold\">Name: </span>{accountInfo.name}<br/>\n            <span className=\"text-bold\">Type: </span>{accountInfo.type}<br/>\n            <span className=\"text-bold\">Status: </span>{accountInfo.status}<br/>\n            <span className=\"text-bold\">Created: </span>{accountInfo.dateCreated}<br/>\n            <span className=\"text-bold\">Updated: </span>{accountInfo.dateUpdated}<br/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const loadingClass = loading ? 'loading' : ''\n\n  return (\n    <DefaultLayout>\n      <h4>Authentication</h4>\n      <ErrorLabel error={error}/>\n      <form onSubmit={onSubmit}>\n        <label className=\"form-label\">Account SID\n          <input className=\"form-input\" type=\"text\" name=\"AccountSid\"\n                 value={accountSid}\n                 onChange={e => onAccountSidChange(e.target.value)}\n                 disabled={loading} placeholder=\"See Twilio console 'Account SID' \"\n          />\n        </label>\n        <label className=\"form-label\">Auth Token\n          <input className=\"form-input\" type=\"password\" name=\"AuthToken\"\n                 value={authToken}\n                 onChange={e => onAuthTokenChange(e.target.value)}\n                 disabled={loading} placeholder=\"See Twilio console 'Auth Token'\"\n          />\n        </label>\n        <button className={`btn btn-primary m-2 ${loadingClass}`} type=\"submit\">Authenticate</button>\n      </form>\n      <AccountDetails/>\n    </DefaultLayout>\n  )\n}\n\nexport default AuthenticationPageView","import {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useState} from \"react\";\nimport useGetTwilioAccount from \"../../hook/useGetTwilioAccount\";\nimport AuthenticationPageView from \"./AuthenticationPageView\";\n\nconst AuthenticationPage = () => {\n  const [accountInfo, setAccountInfo] = useState({})\n  const [authentication, setAuthentication] = useAuthentication()\n  const [accountSid, setAccountSid] = useState(authentication.accountSid)\n  const [authToken, setAuthToken] = useState(authentication.authToken)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const handleGetAccountsSuccess = (response) => {\n    const info = {\n      name: response.data.friendly_name,\n      type: response.data.type,\n      status: response.data.status,\n      dateCreated: response.data.date_created,\n      dateUpdated: response.data.date_updated,\n    }\n    setAccountInfo(info)\n  }\n\n  const handleGetAccountsComplete = () => {\n    setLoading(false)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    setAuthentication({accountSid, authToken})\n    getTwilioAccount({accountSid, authToken})\n  }\n\n  const getTwilioAccount = useGetTwilioAccount({\n    onSuccess: handleGetAccountsSuccess,\n    onError: handleError,\n    onComplete: handleGetAccountsComplete\n  })\n\n  return <AuthenticationPageView\n    accountInfo={accountInfo}\n    accountSid={accountSid}\n    authToken={authToken}\n    error={error}\n    loading={loading}\n    onAccountSidChange={v => setAccountSid(v)}\n    onAuthTokenChange={v => setAuthToken(v)}\n    onSubmit={handleSubmit}\n  />\n}\n\nexport default AuthenticationPage","import {useHistory} from \"react-router-dom\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\n\nconst MessagesPage = () => {\n  const history = useHistory()\n  const [authentication] = useAuthentication()\n  const navigateToAuthenticationPage = () => history.push('/authentication')\n\n  return <DefaultLayout>\n    Phone Numbers using Account SID: {authentication.accountSid} and Auth Token: {authentication.authToken}\n    <button onClick={navigateToAuthenticationPage}>Authenticate</button>\n  </DefaultLayout>\n}\n\nexport default MessagesPage","import './App.css'\n\nimport React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport {AuthenticationProvider} from \"./context/AuthenticationProvider\";\nimport AuthenticationPage from \"./component/AuthenticationPage/AuthenticationPage\"\nimport MessagesPage from \"./component/MessagesPage/MessagesPage\"\n\n/*\n * Spectre CSS Imports\n * See: https://picturepan2.github.io/spectre/getting-started/installation.html\n */\nimport 'spectre.css/dist/spectre.min.css'\nimport 'spectre.css/dist/spectre-exp.css'\nimport 'spectre.css/dist/spectre-icons.css'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AuthenticationProvider>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={AuthenticationPage}/>\n            <Route path=\"/authentication\" component={AuthenticationPage}/>\n            <Route path=\"/phone-numbers\" component={MessagesPage}/>\n          </Switch>\n        </HashRouter>\n      </AuthenticationProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}