{"version":3,"sources":["context/AuthenticationProvider.jsx","component/DefaultLayout/DefaultLayout.jsx","component/AuthenticationMethodCard/AuthenticationMethodCard.jsx","component/AuthenticationPage/AuthenticationPage.jsx","hook/useGetTwilioMessages.js","component/MessageList/MessageListView.jsx","component/MessageCard/MessageCard.jsx","component/MessageList/MessageList.jsx","hook/useSendTwilioMessage.js","component/SuccessLabel/SuccessLabel.jsx","component/ErrorLabel/ErrorLabel.jsx","component/InputField/InputField.jsx","component/TextAreaField/TextAreaField.jsx","component/MessageComposer/MessageComposer.jsx","component/MessagesPage/MessagesPageView.jsx","hook/useGetTwilioPhoneNumbers.js","component/PhoneNumberSelector/PhoneNumberSelector.jsx","component/MessagesPage/MessagesPage.jsx","component/AuthenticationAuthTokenPage/AuthenticationAuthTokenPageView.jsx","component/AuthenticationAuthTokenPage/AuthenticationAuthTokenPage.jsx","component/AuthenticationApiKeyPage/AuthenticationApiKeyPageView.jsx","component/AuthenticationApiKeyPage/AuthenticationApiKeyPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AuthenticationMethod","Authentication","accountSid","authToken","apiKey","apiSecret","type","this","toCredentials","authentication","username","password","mapAuthenticationError","err","Error","message","AuthenticationReadContext","React","createContext","AuthenticationWriteContext","p","useAuthentication","useContext","AuthenticationProvider","children","useState","value","setValue","Provider","v","DefaultLayout","history","useHistory","className","style","padding","onClick","push","href","target","rel","GithubOutlined","marginTop","AuthenticationMethodCard","onChange","e","AuthenticationPage","method","useGetTwilioMessages","credentials","a","phoneNumber","url","result","axios","get","auth","params","From","fromResult","To","toResult","concat","data","messages","sortByDate","b","Date","parse","date_created","sort","Loading","LoadingOutlined","toBaseDirection","direction","includes","messageLabelClass","messageLabelRotation","copyStyle","margin","toDateString","date","d","toLocaleTimeString","CopyToClipboard","txt","data-tooltip","s","navigator","clipboard","writeText","then","console","log","catch","CopyTwoTone","twoToneColor","MessageCard","messageSid","from","to","status","body","RightCircleFilled","rotate","MessageList","onComplete","onError","loading","setLoading","setMessages","hasMounted","setHasMounted","previousPhoneNumber","setPreviousPhoneNumber","handleSuccess","useCallback","response","messagesMapped","map","sid","getMessages","onSuccess","useEffect","length","useSendTwilioMessage","URLSearchParams","append","post","headers","error","SuccessLabel","text","ErrorLabel","name","String","InputField","autoComplete","placeholder","label","validation","invalidHint","isRequired","isEnabled","isPristine","setPristine","isValid","labelClass","showInvalid","required","disabled","event","onBlur","TextAreaField","rows","MessageComposer","setError","isMessageSent","setMessageSent","setTo","setMessage","sendMessage","setTimeout","onSubmit","preventDefault","replace","match","validHint","Tabs","activeTab","setActiveTab","isMessagesActive","isComposerActive","messagesTabClass","composerTabClass","useGetTwilioPhoneNumbers","PhoneNumberSelector","onPhoneNumberChange","phoneNumbers","setPhoneNumbers","getPhoneNumbers","incoming_phone_numbers","filter","pn","capabilities","sms","phone_number","maskPhoneNumber","substr","phoneNumberOptions","placeHolderText","isLoading","options","MessagesPage","setPhoneNumber","isPhoneNumberSelected","loadingClassName","AuthenticationAuthTokenForm","onAccountSidChange","onAuthTokenChange","onCancel","onSignIn","AuthenticationAuthTokenPage","setAuthentication","authenticationRef","useRef","setAccountSid","setAuthToken","current","AuthenticationApiKeyForm","onApiKeyChange","onApiSecretChange","AuthenticationApiKeyPage","setApiKey","setApiSecret","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.326bad5b.chunk.js","sourcesContent":["import React, {useContext, useState} from \"react\";\n\n/**\n * Types of authentication\n * @enum {string}\n */\nexport const AuthenticationMethod = {\n  AUTH_TOKEN: 'auth-token',\n  API_KEY: 'api-key',\n  NONE: ''\n}\n\n/**\n * Authentication data\n */\nexport class Authentication {\n  /**\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {string} apiKey\n   * @param {string} apiSecret\n   * @param {AuthenticationMethod} type\n   */\n  constructor(accountSid='',\n              authToken='',\n              apiKey='',\n              apiSecret='',\n              type= AuthenticationMethod.NONE) {\n    this.accountSid = accountSid\n    this.authToken = authToken\n    this.apiKey = apiKey\n    this.apiSecret = apiSecret\n    this.type = type\n  }\n}\n\n/**\n * @param {Authentication} authentication\n */\nexport const toCredentials = (authentication) => {\n  switch (authentication.type) {\n    case AuthenticationMethod.API_KEY:\n      return {username: authentication.apiKey, password: authentication.apiSecret}\n    case AuthenticationMethod.AUTH_TOKEN:\n      return {username: authentication.accountSid, password: authentication.authToken}\n    default:\n      return {username: '', password: ''}\n  }\n}\n\nexport const mapAuthenticationError = (err) => {\n  if (err instanceof Error && err.message === 'Network Error') {\n    return new Error('Incorrect credentials or unable to access your Twilio account')\n  } else if (err instanceof Error && err.message === 'Request failed with status code 401') {\n    return new Error('Incorrect credentials')\n  } else {\n    return err\n  }\n}\n\n\nconst AuthenticationReadContext = React.createContext({})\nconst AuthenticationWriteContext = React.createContext(p => {})\n\nexport const useAuthentication = () => {\n  const value = useContext(AuthenticationReadContext)\n  const setValue = useContext(AuthenticationWriteContext)\n  return [value, setValue]\n}\n\nexport const AuthenticationProvider = ({children}) => {\n  const [value, setValue] = useState({})\n  return (\n    <AuthenticationReadContext.Provider value={value}>\n      <AuthenticationWriteContext.Provider value={v => setValue(v)}>\n        {children}\n      </AuthenticationWriteContext.Provider>\n    </AuthenticationReadContext.Provider>\n  )\n}\n","import { GithubOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\nimport './DefaultLayout.css'\n\nconst DefaultLayout = ({children}) => {\n  const history = useHistory()\n\n  const navigateToAuthenticationPage = () => {\n    history.push('/authentication')\n  }\n  const navigateToPhoneNumbersPage = () => {\n    history.push('/phone-numbers')\n  }\n\n  return (\n    <>\n      <div className=\"default-layout-container container grid-lg\">\n        <header className=\"navbar bg-primary\" style={{padding: '.5em'}}>\n          <section className=\"navbar-section\">\n            <span className=\"btn btn-link text-light\" onClick={navigateToAuthenticationPage}>Authentication</span>\n            <span className=\"btn btn-link text-light\" onClick={navigateToPhoneNumbersPage}>Messages</span>\n          </section>\n          <section className=\"navbar-center hide-xs\">\n            <span className=\"h5\">Twilio SMS Web</span>\n          </section>\n          <section className=\"navbar-section\">\n            <a className=\"btn btn-link text-light\" href=\"https://github.com/rafasantos/twilio-sms-web\" target=\"_blank\" rel=\"noreferrer\">\n              GitHub <GithubOutlined/>\n            </a>\n          </section>\n        </header>\n      </div>\n      <div className=\"default-layout-container container grid-lg text-left\" style={{marginTop: '1em'}}>\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default DefaultLayout","import \"./AuthenticationMethodCard.css\"\nimport {AuthenticationMethod} from \"../../context/AuthenticationProvider\";\n\nconst AuthenticationMethodCard = ({onChange=()=>{}}) => (\n  <div className=\"text-center\">\n      <div className=\"authentication-method-card-header\">\n        Choose your Twilio authentication method:\n      </div>\n      <button className=\"authentication-method-card-method-btn btn btn-secondary\"\n              onClick={e => onChange(AuthenticationMethod.AUTH_TOKEN)}>\n        AuthToken\n      </button>\n\n      <div className=\"authentication-method-card-divider\">\n        <hr/>or<hr/>\n      </div>\n\n      <button className=\"authentication-method-card-method-btn btn btn-primary\"\n              onClick={e => onChange(AuthenticationMethod.API_KEY)}>\n        Api Key\n      </button>\n  </div>\n)\n\nexport default AuthenticationMethodCard\n","import {AuthenticationMethod} from \"../../context/AuthenticationProvider\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport {useHistory} from \"react-router-dom\";\nimport AuthenticationMethodCard from \"../AuthenticationMethodCard/AuthenticationMethodCard\";\n\nconst AuthenticationPage = () => {\n  const history = useHistory()\n\n  const handleAuthMethod = (method = AuthenticationMethod.NONE) => {\n    if (method === AuthenticationMethod.AUTH_TOKEN) {\n        history.push('/authentication-token')\n    } else if (method === AuthenticationMethod.API_KEY) {\n        history.push('/authentication-api-key')\n    }\n  }\n\n  return <DefaultLayout>\n    <h4>Authentication</h4>\n    <AuthenticationMethodCard onChange={handleAuthMethod}/>\n  </DefaultLayout>\n}\n\nexport default AuthenticationPage\n","import axios from \"axios\";\nimport {toCredentials, useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioMessages = () => {\n\n  const [authentication] = useAuthentication()\n  const credentials = toCredentials(authentication)\n\n  const request = async ({phoneNumber}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/Messages.json`\n    let result = []\n       const fromResult = await axios.get(url,\n        {\n          auth: credentials,\n          params: {From: phoneNumber}\n        })\n      const toResult = await axios.get(url,\n        {\n          auth: credentials,\n          params: {To: phoneNumber}\n        })\n      result = result\n        .concat(fromResult.data.messages)\n        .concat(toResult.data.messages)\n    const sortByDate = (a,b) => Date.parse(a.date_created) > Date.parse(b.date_created) ? -1 : 1\n    return result.sort(sortByDate)\n  }\n\n  return request\n}\n\nexport default useGetTwilioMessages\n","import {LoadingOutlined} from \"@ant-design/icons\";\n\nexport const Loading = ({className}) => <>\n  <div className={`${className} text-center message-list-loading-container`}>\n    <LoadingOutlined className=\"message-list-loading text-primary\" />\n  </div>\n</>\n","import {CopyTwoTone, RightCircleFilled} from \"@ant-design/icons\";\nimport \"./MessageCard.css\";\n\nconst toBaseDirection = direction => direction.includes('inbound') ? 'inbound' : 'outbound'\nconst messageLabelClass = direction => `message-card-label text-code text-small ${toBaseDirection(direction)}`\nconst messageLabelRotation = direction => toBaseDirection(direction) === 'inbound' ? 180 : 0\nconst copyStyle = {padding: '0', margin: '0'}\n\nconst toDateString = (date) => {\n  const d = new Date(date)\n  return `${d.toDateString()} ${d.toLocaleTimeString()}`\n}\n\nconst copyToClipboard = (s) =>\n  navigator.clipboard.writeText(s)\n    .then(() => console.log('Text copied', s))\n    .catch(() => console.log('Unable to copy to clipboard'))\n\nconst CopyToClipboard = ({txt}) => <>\n  <div className=\"tooltip message-card-copy-btn\" data-tooltip=\"Copy to clipboard\" onClick={() => copyToClipboard(txt)}>\n    <CopyTwoTone twoToneColor=\"#5755d9\" style={copyStyle}/>\n  </div>\n</>\n\nconst MessageCard = ({messageSid='', direction='', from='', to='',\n                      date=new Date(), status='', body=''}) => {\n\n  return <>\n    <div className=\"message-card\">\n      <div className={messageLabelClass(direction)}>\n        <RightCircleFilled rotate={messageLabelRotation(direction)} />\n      </div>\n      <div>\n        <div className=\"message-card-header text-tiny\">\n        <span>\n          <CopyToClipboard txt={from}/>\n          <strong>From:</strong> {from}\n        </span>\n          <span>\n          <CopyToClipboard txt={to}/>\n          <strong>To:</strong> {to}\n        </span>\n          <span className=\"message-card-header-status\">\n          <strong>Status:</strong> {status}\n        </span>\n          <span>\n          <strong>Direction:</strong> {direction}\n        </span>\n        </div>\n        <div className=\"message-card-body text-code text-small\">\n          {body}\n        </div>\n        <div className=\"message-card-footer text-tiny\">\n          <strong>Date: </strong>{toDateString(date)}\n          <span>\n            <strong>MessageSid: </strong>{messageSid}\n          </span>\n        </div>\n      </div>\n    </div>\n  </>\n}\n\nexport default MessageCard\n","import {useCallback, useEffect, useState} from \"react\";\nimport useGetTwilioMessages from \"../../hook/useGetTwilioMessages\";\nimport {Loading} from \"./MessageListView\";\nimport MessageCard from \"../MessageCard/MessageCard\";\n\nconst MessageList = ({phoneNumber = '', onComplete = () => {}, onError = () => {}}) => {\n  const [loading, setLoading] = useState(true)\n  const [messages, setMessages] = useState([])\n  const [hasMounted, setHasMounted] = useState(false)\n  const [previousPhoneNumber, setPreviousPhoneNumber] = useState(null)\n\n  const handleSuccess = useCallback((response) => {\n    const messagesMapped = response\n      .map(v => ({\n        messageSid: v.sid,\n        direction: v.direction,\n        from: v.from,\n        to: v.to,\n        date: v.date_created,\n        status: v.status,\n        body: v.body\n      }))\n    setMessages(messagesMapped)\n    setLoading(false)\n  }, [setMessages, setLoading])\n\n  const getMessages = useGetTwilioMessages({\n    onSuccess: handleSuccess,\n    onComplete: onComplete,\n    onError: onError\n  })\n\n  useEffect(() => {\n    setHasMounted(true)\n  }, [setHasMounted])\n\n  useEffect(() => {\n    if (hasMounted && (phoneNumber?.length > 0 && previousPhoneNumber !== phoneNumber)) {\n      getMessages({phoneNumber: phoneNumber}).then(handleSuccess).catch(onError).then(onComplete)\n      setPreviousPhoneNumber(phoneNumber)\n      setLoading(true)\n    }\n  }, [hasMounted, phoneNumber, previousPhoneNumber, getMessages, messages, handleSuccess, onError, onComplete, setPreviousPhoneNumber, setLoading])\n\n  if (loading) return <Loading className=\"h1 m-2\"/>\n\n  return messages.map(v =>\n    <MessageCard\n      key={v.messageSid}\n      messageSid={v.messageSid}\n      from={v.from}\n      to={v.to}\n      body={v.body}\n      direction={v.direction}\n      status={v.status}\n      date={v.date}\n    />)\n}\n\nexport default MessageList\n","import axios from \"axios\";\nimport {toCredentials, useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useSendTwilioMessage = ({ onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const [authentication] = useAuthentication()\n  const credentials = toCredentials(authentication)\n\n  const request = ({to, from, body}) => {\n    const data = new URLSearchParams()\n    data.append('To', to)\n    data.append('From', from)\n    data.append('Body', body)\n\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/Messages.json`\n    axios.post(url, data , {\n        auth: credentials,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return request\n}\n\nexport default useSendTwilioMessage\n","const SuccessLabel = ({text}) => {\n  if (text !== null && text.length > 0) {\n    return <span className=\"label label-success\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {text}\n    </span>\n  }\n  return null\n}\n\nexport default SuccessLabel","const ErrorLabel = ({error}) => {\n  const toString = () => {\n    if (error instanceof Error) {\n      return `${error.name}: ${error.message}`\n    }\n    return `Error: ${String(error)}`\n  }\n\n  if (error) {\n    return <span className=\"label label-error\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {toString(error)}\n    </span>\n  }\n\n  return null\n}\n\nexport default ErrorLabel","import {useState} from \"react\";\n\nconst InputField = ({ type='text',\n                      name='',\n                      value='',\n                      autoComplete = '',\n                      placeholder='Placeholder',\n                      label='Label',\n                      validation=()=>{},\n                      invalidHint='Invalid value',\n                      isRequired=false,\n                      isEnabled=true,\n                      onChange=()=>{}}) => {\n  const [isPristine, setPristine] = useState(true);\n  const isValid = () => {\n    try {\n      return validation(value) !== null\n    } catch (err) {\n      return false\n    }\n  }\n  const labelClass = `form-label ${ isPristine || isValid() ? '' : 'has-error'}`\n  const showInvalid = !isPristine && !isValid()\n  return <label className={labelClass}>{label}:{isRequired && <sup className=\"text-error\">&lowast; </sup>}\n    <input\n      type={type}\n      name={name}\n      className=\"form-input\"\n      placeholder={placeholder}\n      required={isRequired}\n      value={value}\n      autoComplete={autoComplete}\n      disabled={!isEnabled}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={() => setPristine(false)}/>\n    {showInvalid && <span className=\"form-input-hint\">{invalidHint}</span>}\n    {!showInvalid && <span className=\"form-input-hint\">{placeholder}</span>}\n  </label>\n}\n\nexport default InputField\n","import {useState} from \"react\";\n\nconst TextAreaField = ({ name='',\n                         value='',\n                         placeholder='Placeholder',\n                         label='Label',\n                         validation=()=>{},\n                         invalidHint='Invalid value',\n                         isRequired=false,\n                         isEnabled=true,\n                         rows = 3,\n                         onChange=()=>{}}) => {\n  const [isPristine, setPristine] = useState(true);\n  const isValid = () => {\n    try {\n      return validation(value) !== null\n    } catch (err) {\n      return false\n    }\n  }\n  const labelClass = `form-label ${ isPristine || isValid() ? '' : 'has-error'}`\n  const showInvalid = !isPristine && !isValid()\n  return <label className={labelClass}>{label}:{isRequired && <sup className=\"text-error\">&lowast; </sup>}\n    <textarea\n      className=\"form-input\"\n      name={name}\n      placeholder={placeholder}\n      required={isRequired}\n      value={value}\n      rows={rows}\n      disabled={!isEnabled}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={() => setPristine(false)}>\n    </textarea>\n    {showInvalid && <span className=\"form-input-hint\">{invalidHint}</span>}\n    {!showInvalid && <span className=\"form-input-hint\">{placeholder}</span>}\n  </label>\n}\n\nexport default TextAreaField","import {useState} from \"react\";\nimport \"./MessageComposer.css\"\nimport useSendTwilioMessage from \"../../hook/useSendTwilioMessage\";\nimport SuccessLabel from \"../SuccessLabel/SuccessLabel\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport InputField from \"../InputField/InputField\";\nimport TextAreaField from \"../TextAreaField/TextAreaField\";\n\nconst MessageComposer = ({phoneNumber = ''}) => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [isMessageSent, setMessageSent] = useState(false)\n  const [to, setTo] = useState('')\n  const [message, setMessage] = useState('')\n  const toValidationPattern = '^\\\\+\\\\d{11}'\n  const messageValidationPattern = '[\\\\w\\\\d]{3,}'\n\n  const handleSendMessageSuccess = (response) => {\n    setMessageSent(true)\n    setTimeout(()=> setMessageSent(false), 5000)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleMessageSentComplete = () => {\n    setLoading(false)\n  }\n\n  const sendMessage = useSendTwilioMessage({\n    onSuccess: handleSendMessageSuccess,\n    onError: handleError,\n    onComplete: handleMessageSentComplete\n  })\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    sendMessage({to: to, from: phoneNumber, body: message})\n  }\n\n  const handleToChange = (v) => {\n    if (v.length > 0) {\n      v = '+' + v.replace(/\\D/g, '')\n    }\n    if (v.length < 13) {\n      setTo(v)\n    }\n  }\n\n  const handleMessageChange = (v) => {\n    if (v.length < 200) {\n      setMessage(v)\n    }\n  }\n\n  return <div>\n    <ErrorLabel error={error}/>\n    <form className=\"form-group\" onSubmit={handleOnSubmit}>\n      <fieldset disabled={loading}>\n        <InputField\n          label=\"To\"\n          type='tel'\n          value={to}\n          onChange={handleToChange}\n          validation={v => v.match(toValidationPattern)}\n          placeholder=\"Recipient's phone number\"\n          invalidHint=\"Phone number is invalid, it must contain the country code followed by 10 digits\"\n          isRequired={true}\n        />\n        <TextAreaField\n          label=\"Message\"\n          value={message}\n          isRequired={true}\n          placeholder={`Enter the message to sent to: ${to} from: ${phoneNumber}`}\n          validHint={`This message is going to be sent to: ${to} from: ${phoneNumber}`}\n          invalidHint=\"Invalid message, it must be between 3 and 200 characters\"\n          rows='3'\n          validation={v => v.match(messageValidationPattern)}\n          onChange={handleMessageChange}\n        />\n      </fieldset>\n      <div className=\"text-center m-2\">\n        <button className={`message-composer-submit btn btn-primary ${loading ? 'loading' : ''}`} type=\"submit\">Send</button>\n      </div>\n    </form>\n    <div className=\"text-center\">\n      {isMessageSent && <SuccessLabel text=\"Message sent successfully.\"/>}\n    </div>\n  </div>\n}\n\nexport default MessageComposer\n","import \"./MessagesPage.css\"\nimport MessageList from \"../MessageList/MessageList\";\nimport MessageComposer from \"../MessageComposer/MessageComposer\";\nimport {useState} from \"react\";\n\nexport const Tabs = ({phoneNumber=''}) => {\n  const [activeTab, setActiveTab] = useState('messages')\n  const handleActivateMessages = () => setActiveTab('messages')\n  const handleActivateComposer = () => setActiveTab('composer')\n  const isMessagesActive = activeTab === 'messages'\n  const isComposerActive = activeTab === 'composer'\n  const messagesTabClass = `tab-item messages-page-tabs-area ${isMessagesActive ? 'active' : ''}`\n  const composerTabClass = `tab-item messages-page-tabs-area ${isComposerActive ? 'active' : ''}`\n\n  return <>\n    <div className=\"messages-page-tabs-container\">\n      <div className=\"messages-page-tabs-content\">\n        <ul className=\"tab tab-block\">\n          <li className={messagesTabClass} onClick={handleActivateMessages}>\n            Messages\n          </li>\n          <li className={composerTabClass} onClick={handleActivateComposer}>\n            Composer\n          </li>\n        </ul>\n      </div>\n    </div>\n    {isMessagesActive && <MessageList phoneNumber={phoneNumber}/>}\n    {isComposerActive && <MessageComposer phoneNumber={phoneNumber}/>}\n  </>\n}","import axios from \"axios\";\nimport {Authentication, toCredentials} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioPhoneNumbers = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const getPhoneNumbers = (authentication = new Authentication()) => {\n    const credentials = toCredentials(authentication)\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/IncomingPhoneNumbers.json?Beta=false`\n    axios.get(url,\n      {\n        auth: credentials\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getPhoneNumbers\n}\n\nexport default useGetTwilioPhoneNumbers\n","import Select from 'react-select'\nimport {useEffect, useState} from \"react\";\nimport useGetTwilioPhoneNumbers from \"../../hook/useGetTwilioPhoneNumbers\";\nimport \"./PhoneNumberSelector.css\"\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\n\nconst PhoneNumberSelector = ({ onError = () => {},\n                               onComplete = () => {},\n                               onPhoneNumberChange = () => {}}) => {\n  const [authentication] = useAuthentication()\n  const [loading, setLoading] = useState(true);\n  const [phoneNumbers, setPhoneNumbers] = useState([])\n\n  const handleOnComplete = () => {\n    setLoading(false)\n    onComplete()\n  }\n\n  const handleOnChange = (event) => {\n    onPhoneNumberChange(event.value)\n  }\n\n  const handleGetPhoneNumberSuccess = (response) => {\n    const result = response?.data?.incoming_phone_numbers\n      .filter(pn => pn.capabilities.sms)\n      .map(pn => pn.phone_number)\n      .sort()\n    setPhoneNumbers(result)\n  }\n\n  const getPhoneNumbers = useGetTwilioPhoneNumbers({\n    onSuccess: handleGetPhoneNumberSuccess,\n    onError: onError,\n    onComplete: handleOnComplete\n  })\n\n  // TODO: Currently, this mask is limited to country code +1; we need a mask for all country codes\n  const maskPhoneNumber = v => {\n    let result = v.substr(0, 2)\n    result += ' ' + v.substr(2, 3)\n    result += ' ' + v.substr(5, 3)\n    result += ' ' + v.substr(8)\n    return result\n  }\n\n  const phoneNumberOptions = phoneNumbers.map(v => ({value: v, label: maskPhoneNumber(v)}))\n\n  const placeHolderText = loading ? 'Loading phone numbers...' : 'Select (or type) a phone number...'\n\n  // Get available phone number on first render\n  useEffect(() => {\n    if (phoneNumbers.length === 0) {\n      getPhoneNumbers(authentication)\n    }\n  }, [getPhoneNumbers, phoneNumbers, authentication])\n\n  return <Select\n      placeholder={placeHolderText}\n      isLoading={loading}\n      options={phoneNumberOptions}\n      onChange={handleOnChange}\n  />\n}\n\nexport default PhoneNumberSelector\n","import {useState} from \"react\";\nimport {Tabs} from \"./MessagesPageView\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useHistory} from \"react-router-dom\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport PhoneNumberSelector from \"../PhoneNumberSelector/PhoneNumberSelector\";\n\nconst EMPTY_PHONE_NUMBER = ''\n\nconst MessagesPage = () => {\n  const [error, setError] = useState(null)\n  const [phoneNumber, setPhoneNumber] = useState(EMPTY_PHONE_NUMBER)\n  const [authentication] = useAuthentication()\n  const history = useHistory()\n\n  // TODO: Move this to a router guard\n  if (!authentication?.accountSid) {\n    history.push('/authentication')\n    return null\n  }\n\n  const handleError = (err) => setError(err)\n\n  const handlePhoneNumberChange = (v) => setPhoneNumber(v)\n\n  const isPhoneNumberSelected = phoneNumber !== EMPTY_PHONE_NUMBER\n\n  return <DefaultLayout>\n    <h4>Messages</h4>\n    <ErrorLabel error={error}/>\n    <PhoneNumberSelector onError={handleError} onPhoneNumberChange={handlePhoneNumberChange}/>\n    {isPhoneNumberSelected && <Tabs phoneNumber={phoneNumber}/>}\n  </DefaultLayout>\n}\n\nexport default MessagesPage\n","import InputField from \"../InputField/InputField\";\n\nconst loadingClassName = (loading = false) => loading ? 'loading' : ''\n\nconst AuthenticationAuthTokenForm = ({ accountSid='', authToken='', loading=false,\n                         onAccountSidChange=()=>{}, onAuthTokenChange=()=>{}, onCancel=()=>{}, onSignIn=()=>{} }) => (\n  <form onSubmit={e => {\n    e.preventDefault()\n    onSignIn()\n  }}>\n    <InputField\n      type=\"text\"\n      name=\"AccountSid\"\n      label=\"Account SID\"\n      value={accountSid}\n      autoComplete=\"account-sid\"\n      placeholder=\"Account SID located at your Twilio Console\"\n      isRequired={true}\n      isEnabled={!loading}\n      onChange={onAccountSidChange}\n    />\n    <InputField\n      type=\"password\"\n      name=\"AuthToken\"\n      label=\"Auth Token\"\n      value={authToken}\n      autoComplete=\"auth-token\"\n      placeholder=\"Auth Token located at your Twilio Console\"\n      isRequired={true}\n      isEnabled={!loading}\n      onChange={onAuthTokenChange}\n    />\n    <div className=\"buttons-container\">\n      <button className=\"btn btn-secondary\" type=\"button\" onClick={onCancel}>Cancel</button>\n      <button className={`btn btn-primary ${loadingClassName(loading)}`} type=\"submit\">Sing-in</button>\n    </div>\n  </form>\n)\n\nexport default AuthenticationAuthTokenForm\n","import ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport AuthenticationAuthTokenForm from \"./AuthenticationAuthTokenPageView\";\nimport {\n  Authentication,\n  AuthenticationMethod,\n  mapAuthenticationError,\n  useAuthentication\n} from \"../../context/AuthenticationProvider\";\nimport {useRef, useState} from \"react\";\nimport useGetTwilioPhoneNumbers from \"../../hook/useGetTwilioPhoneNumbers\";\nimport {useHistory} from \"react-router-dom\";\n\nconst AuthenticationAuthTokenPage = () => {\n  const [authentication, setAuthentication] = useAuthentication()\n  const authenticationRef = useRef(authentication)\n  const [accountSid, setAccountSid] = useState(authentication.accountSid)\n  const [authToken, setAuthToken] = useState(authentication.authToken)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  const handleError = (err) => {\n    setError(mapAuthenticationError(err))\n    setLoading(false)\n  }\n\n  const handleCancel = () => history.push('/authentication')\n\n  const handlePhoneNumbersSuccess = () => {\n    setAuthentication(authenticationRef.current)\n    history.push('/phone-numbers')\n  }\n\n  const handleSignIn = () => {\n    const auth = new Authentication(accountSid, authToken, '', '', AuthenticationMethod.AUTH_TOKEN)\n    authenticationRef.current = auth\n    setLoading(true)\n    /*\n     * We want to get phone numbers after sign-in because at minimum we want to know\n     * if the credentials have permissions for it before moving forward\n     */\n    getPhoneNumbers(auth)\n  }\n\n  const getPhoneNumbers = useGetTwilioPhoneNumbers({\n    onError: handleError,\n    onSuccess: handlePhoneNumbersSuccess,\n  })\n\n  return <DefaultLayout>\n    <h4>Authentication with Auth Token</h4>\n    <ErrorLabel error={error}/>\n    <AuthenticationAuthTokenForm\n      accountSid={accountSid}\n      authToken={authToken}\n      onAccountSidChange={setAccountSid}\n      onAuthTokenChange={setAuthToken}\n      loading={loading}\n      onSignIn={handleSignIn}\n      onCancel={handleCancel} />\n  </DefaultLayout>\n}\n\nexport default AuthenticationAuthTokenPage\n","import InputField from \"../InputField/InputField\";\n\nconst AuthenticationApiKeyForm = ({ accountSid='', apiKey='', apiSecret='', loading=false,\n                      onAccountSidChange=()=>{}, onApiKeyChange=()=>{}, onApiSecretChange=()=>{}, onCancel=()=>{}, onSignIn=()=>{} }) => (\n  <form onSubmit={e => {\n    e.preventDefault()\n    onSignIn()\n  }}>\n    <InputField\n      type=\"text\"\n      name=\"AccountSid\"\n      label=\"Account SID\"\n      value={accountSid}\n      autoComplete=\"account-sid\"\n      placeholder=\"Account SID located at your Twilio Console\"\n      isRequired={true}\n      isEnabled={!loading}\n      onChange={onAccountSidChange}\n    />\n    <InputField\n      type=\"text\"\n      name=\"ApiKey\"\n      label=\"API Key\"\n      value={apiKey}\n      autoComplete=\"api-key\"\n      placeholder=\"API Key located at your Twilio Console\"\n      isRequired={true}\n      isEnabled={!loading}\n      onChange={onApiKeyChange}\n    />\n    <InputField\n      type=\"password\"\n      name=\"ApiSecret\"\n      label=\"API Secret\"\n      value={apiSecret}\n      autoComplete='api-secret'\n      placeholder=\"API Secret for your API Key\"\n      isRequired={true}\n      isEnabled={!loading}\n      onChange={onApiSecretChange}\n    />\n    <div className=\"buttons-container\">\n      <button className=\"btn btn-secondary\" type=\"button\" onClick={onCancel}>Cancel</button>\n      <button className=\"btn btn-primary\" type=\"submit\">Sing-in</button>\n    </div>\n  </form>\n)\n\nexport default AuthenticationApiKeyForm\n","import {\n  Authentication,\n  AuthenticationMethod,\n  mapAuthenticationError,\n  useAuthentication\n} from \"../../context/AuthenticationProvider\";\nimport {useRef, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport AuthenticationApiKeyForm from \"./AuthenticationApiKeyPageView\";\nimport useGetTwilioPhoneNumbers from \"../../hook/useGetTwilioPhoneNumbers\";\n\nconst AuthenticationApiKeyPage = () => {\n  const [authentication, setAuthentication] = useAuthentication()\n  const authenticationRef = useRef(authentication)\n  const [accountSid, setAccountSid] = useState(authentication.accountSid)\n  const [apiKey, setApiKey] = useState(authentication.apiKey)\n  const [apiSecret, setApiSecret] = useState(authentication.apiSecret)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  const handleError = (err) => {\n    setError(mapAuthenticationError(err))\n    setLoading(false)\n  }\n\n  const handleCancel = () => history.push('/authentication')\n\n  const handlePhoneNumbersSuccess = () => {\n    setAuthentication(authenticationRef.current)\n    history.push('/phone-numbers')\n  }\n\n  const handleSignIn = () => {\n    const auth = new Authentication(accountSid, '', apiKey, apiSecret, AuthenticationMethod.API_KEY)\n    authenticationRef.current = auth\n    setLoading(true)\n    /*\n     * We want to get phone numbers after sign-in because at minimum we want to know\n     * if the credentials have permissions for it before moving forward\n     */\n    getPhoneNumbers(auth)\n  }\n\n  const getPhoneNumbers = useGetTwilioPhoneNumbers({\n    onError: handleError,\n    onSuccess: handlePhoneNumbersSuccess,\n  })\n\n\n  return <DefaultLayout>\n    <h4>Authentication with Api Key</h4>\n    <ErrorLabel error={error}/>\n    <AuthenticationApiKeyForm\n      accountSid={accountSid}\n      apiKey={apiKey}\n      apiSecret={apiSecret}\n      loading={loading}\n      onAccountSidChange={setAccountSid}\n      onApiKeyChange={setApiKey}\n      onApiSecretChange={setApiSecret}\n      onSignIn={handleSignIn}\n      onCancel={handleCancel}\n    />\n  </DefaultLayout>\n\n}\n\nexport default AuthenticationApiKeyPage\n","/*\n * Spectre CSS Imports\n * See: https://picturepan2.github.io/spectre/getting-started/installation.html\n */\nimport 'spectre.css/dist/spectre.min.css'\nimport 'spectre.css/dist/spectre-exp.css'\nimport 'spectre.css/dist/spectre-icons.css'\n\nimport './App.css'\n\nimport React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport {AuthenticationProvider} from \"./context/AuthenticationProvider\";\nimport AuthenticationPage from \"./component/AuthenticationPage/AuthenticationPage\"\nimport MessagesPage from \"./component/MessagesPage/MessagesPage\"\nimport AuthenticationAuthTokenPage from \"./component/AuthenticationAuthTokenPage/AuthenticationAuthTokenPage\";\nimport AuthenticationApiKeyPage from \"./component/AuthenticationApiKeyPage/AuthenticationApiKeyPage\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AuthenticationProvider>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={AuthenticationPage}/>\n            <Route path=\"/authentication\" component={AuthenticationPage}/>\n            <Route path=\"/authentication-token\" component={AuthenticationAuthTokenPage}/>\n            <Route path=\"/authentication-api-key\" component={AuthenticationApiKeyPage}/>\n            <Route path=\"/phone-numbers\" component={MessagesPage}/>\n          </Switch>\n        </HashRouter>\n      </AuthenticationProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}