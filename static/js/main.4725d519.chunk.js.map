{"version":3,"sources":["context/AuthenticationProvider.jsx","hook/useGetTwilioAccount.js","component/InputField/InputField.jsx","component/AuthenticationPage/AuthenticationPageView.jsx","component/DefaultLayout/DefaultLayout.jsx","component/ErrorLabel/ErrorLabel.jsx","component/AuthenticationPage/AuthenticationPage.jsx","hook/useGetTwilioMessages.js","component/MessageList/MessageListView.jsx","component/MessageCard/MessageCard.jsx","component/MessageList/MessageList.jsx","hook/useSendTwilioMessage.js","component/SuccessLabel/SuccessLabel.jsx","component/TextAreaField/TextAreaField.jsx","component/MessageComposer/MessageComposer.jsx","component/MessagesPage/MessagesPageView.jsx","hook/useGetTwilioPhoneNumbers.js","component/PhoneNumberSelector/PhoneNumberSelector.jsx","component/MessagesPage/MessagesPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AuthenticationReadContext","React","createContext","AuthenticationWriteContext","useAuthentication","useContext","AuthenticationProvider","children","useState","value","setValue","Provider","v","useGetTwilioAccount","onSuccess","onError","onComplete","accountSid","authToken","url","axios","get","auth","username","password","then","response","catch","error","InputField","type","name","placeholder","label","validation","invalidHint","isRequired","isEnabled","onChange","isPristine","setPristine","isValid","err","labelClass","showInvalid","className","required","disabled","event","target","onBlur","AuthenticateForm","loading","onAccountSidChange","onAuthTokenChange","onSubmit","AccountDetails","accountInfo","Object","keys","length","style","marginTop","marginBottom","status","dateCreated","dateUpdated","DefaultLayout","history","useHistory","padding","onClick","push","href","rel","GithubOutlined","ErrorLabel","margin","Error","message","String","AuthenticationPage","authentication","setAuthentication","setAccountInfo","setAccountSid","setAuthToken","setLoading","setError","getTwilioAccount","info","data","friendly_name","date_created","date_updated","preventDefault","useGetTwilioMessages","a","phoneNumber","result","params","From","fromResult","To","toResult","concat","messages","sortByDate","b","Date","parse","sort","Loading","LoadingOutlined","toBaseDirection","direction","includes","messageLabelClass","messageLabelRotation","copyStyle","toDateString","date","d","toLocaleTimeString","CopyToClipboard","txt","data-tooltip","s","navigator","clipboard","writeText","console","log","CopyTwoTone","twoToneColor","MessageCard","messageSid","from","to","body","RightCircleFilled","rotate","MessageList","setMessages","hasMounted","setHasMounted","previousPhoneNumber","setPreviousPhoneNumber","handleSuccess","useCallback","messagesMapped","map","sid","getMessages","useEffect","useSendTwilioMessage","URLSearchParams","append","post","headers","SuccessLabel","text","TextAreaField","rows","MessageComposer","isMessageSent","setMessageSent","setTo","setMessage","sendMessage","setTimeout","replace","match","validHint","Tabs","activeTab","setActiveTab","isMessagesActive","isComposerActive","messagesTabClass","composerTabClass","useGetTwilioPhoneNumbers","PhoneNumberSelector","onPhoneNumberChange","phoneNumbers","setPhoneNumbers","getPhoneNumbers","incoming_phone_numbers","filter","pn","capabilities","sms","phone_number","maskPhoneNumber","substr","phoneNumberOptions","placeHolderText","isLoading","options","MessagesPage","setPhoneNumber","isPhoneNumberSelected","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4725d519.chunk.js","sourcesContent":["import React, {useContext, useState} from \"react\";\n\nconst AuthenticationReadContext = React.createContext({})\nconst AuthenticationWriteContext = React.createContext(() => {})\n\nexport const useAuthentication = () => {\n  const value = useContext(AuthenticationReadContext)\n  const setValue = useContext(AuthenticationWriteContext)\n  return [value, setValue]\n}\n\nexport const AuthenticationProvider = ({children}) => {\n  const [value, setValue] = useState({})\n  return (\n    <AuthenticationReadContext.Provider value={value}>\n      <AuthenticationWriteContext.Provider value={v => setValue(v)}>\n        {children}\n      </AuthenticationWriteContext.Provider>\n    </AuthenticationReadContext.Provider>\n  )\n}\n","import axios from \"axios\";\n\nconst useGetTwilioAccount = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n  const getAccount = ({accountSid, authToken}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}.json`\n    axios.get(url,\n      {\n        auth: { username: accountSid, password: authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getAccount\n}\n\nexport default useGetTwilioAccount","import {useState} from \"react\";\n\nconst InputField = ({ type='text',\n                      name='',\n                      value='',\n                      placeholder='Placeholder',\n                      label='Label',\n                      validation=()=>{},\n                      invalidHint='Invalid value',\n                      isRequired=false,\n                      isEnabled=true,\n                      onChange=()=>{}}) => {\n  const [isPristine, setPristine] = useState(true);\n  const isValid = () => {\n    try {\n      return validation(value) !== null\n    } catch (err) {\n      return false\n    }\n  }\n  const labelClass = `form-label ${ isPristine || isValid() ? '' : 'has-error'}`\n  const showInvalid = !isPristine && !isValid()\n  return <label className={labelClass}>{label}:{isRequired && <sup className=\"text-error\">&lowast; </sup>}\n    <input\n      type={type}\n      name={name}\n      className=\"form-input\"\n      placeholder={placeholder}\n      required={isRequired}\n      value={value}\n      disabled={!isEnabled}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={() => setPristine(false)}/>\n    {showInvalid && <span className=\"form-input-hint\">{invalidHint}</span>}\n    {!showInvalid && <span className=\"form-input-hint\">{placeholder}</span>}\n  </label>\n}\n\nexport default InputField","import InputField from \"../InputField/InputField\";\n\nexport const AuthenticateForm = ({ accountSid = '',\n                                   authToken = '',\n                                   loading = true,\n                                   onAccountSidChange = () => {},\n                                   onAuthTokenChange = () => {},\n                                   onSubmit = () => {}}) => (\n  <>\n    <form onSubmit={onSubmit}>\n      <InputField\n        type=\"text\"\n        name=\"AccountSid\"\n        label=\"Account SID\"\n        value={accountSid}\n        placeholder=\"Enter your Twilio 'Account SID' located at your Twilio Console\"\n        isEnabled={!loading}\n        onChange={onAccountSidChange}\n      />\n      <InputField\n        type=\"password\"\n        name=\"AuthToken\"\n        label=\"Auth Token\"\n        placeholder=\"Enter your Twilio 'Auth Token' located in your Twilio Console\"\n        value={authToken}\n        isEnabled={!loading}\n        onChange={onAuthTokenChange}\n      />\n      <div className=\"text-center m-2\">\n        <button className={`btn btn-primary ${loading ? 'loading' : ''}`} type=\"submit\">Authenticate</button>\n      </div>\n    </form>\n  </>\n)\n\nexport const AccountDetails = ({accountInfo = ''}) => {\n  if (Object.keys(accountInfo).length === 0) return null\n  return (\n    <div className=\"flex-centered\" style={{marginTop: '2em'}}>\n      <div className=\"card\">\n        <div className=\"card-header bg-success text-center\">\n          <h6>Authentication Success</h6>\n        </div>\n        <div className=\"card-body\">\n          <p className=\"text-small\" style={{marginBottom: '.5em'}}>You are authenticated with the following account:</p>\n          <span className=\"text-bold\">Name: </span>{accountInfo.name}<br/>\n          <span className=\"text-bold\">Type: </span>{accountInfo.type}<br/>\n          <span className=\"text-bold\">Status: </span>{accountInfo.status}<br/>\n          <span className=\"text-bold\">Created: </span>{accountInfo.dateCreated}<br/>\n          <span className=\"text-bold\">Updated: </span>{accountInfo.dateUpdated}<br/>\n        </div>\n      </div>\n    </div>\n  )\n}","import { GithubOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\nimport './DefaultLayout.css'\n\nconst DefaultLayout = ({children}) => {\n  const history = useHistory()\n\n  const navigateToAuthenticationPage = () => {\n    history.push('/authentication')\n  }\n  const navigateToPhoneNumbersPage = () => {\n    history.push('/phone-numbers')\n  }\n\n  return (\n    <>\n      <div className=\"default-layout-container container grid-lg\">\n        <header className=\"navbar bg-primary\" style={{padding: '.5em'}}>\n          <section className=\"navbar-section\">\n            <span className=\"btn btn-link text-light\" onClick={navigateToAuthenticationPage}>Authentication</span>\n            <span className=\"btn btn-link text-light\" onClick={navigateToPhoneNumbersPage}>Messages</span>\n          </section>\n          <section className=\"navbar-center hide-xs\">\n            <span className=\"h5\">Twilio SMS Web</span>\n          </section>\n          <section className=\"navbar-section\">\n            <a className=\"btn btn-link text-light\" href=\"https://github.com/rafasantos/twilio-sms-web\" target=\"_blank\" rel=\"noreferrer\">\n              GitHub <GithubOutlined/>\n            </a>\n          </section>\n        </header>\n      </div>\n      <div className=\"default-layout-container container grid-lg text-left\" style={{marginTop: '1em'}}>\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default DefaultLayout","const ErrorLabel = ({error}) => {\n  const toString = () => {\n    if (error instanceof Error) {\n      return `${error.name}: ${error.message}`\n    }\n    return `Error: ${String(error)}`\n  }\n\n  if (error) {\n    return <span className=\"label label-error\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {toString(error)}\n    </span>\n  }\n\n  return null\n}\n\nexport default ErrorLabel","import {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useState} from \"react\";\nimport useGetTwilioAccount from \"../../hook/useGetTwilioAccount\";\nimport {AccountDetails, AuthenticateForm} from \"./AuthenticationPageView\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\n\nconst AuthenticationPage = () => {\n  const [authentication, setAuthentication] = useAuthentication()\n  const [accountInfo, setAccountInfo] = useState(authentication.accountInfo)\n  const [accountSid, setAccountSid] = useState(authentication.accountSid)\n  const [authToken, setAuthToken] = useState(authentication.authToken)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const handleGetAccountsSuccess = (response) => {\n    const info = {\n      name: response.data.friendly_name,\n      type: response.data.type,\n      status: response.data.status,\n      dateCreated: response.data.date_created,\n      dateUpdated: response.data.date_updated,\n    }\n    setAccountInfo(info)\n    setAuthentication({accountSid, authToken, accountInfo: info})\n  }\n\n  const handleGetAccountsComplete = () => {\n    setLoading(false)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    getTwilioAccount({accountSid, authToken})\n  }\n\n  const getTwilioAccount = useGetTwilioAccount({\n    onSuccess: handleGetAccountsSuccess,\n    onError: handleError,\n    onComplete: handleGetAccountsComplete\n  })\n\n  return <DefaultLayout>\n    <h4>Authentication</h4>\n    <ErrorLabel error={error}/>\n    <AuthenticateForm\n      accountSid={accountSid}\n      authToken={authToken}\n      loading={loading}\n      onAccountSidChange={v => setAccountSid(v)}\n      onAuthTokenChange={v => setAuthToken(v)}\n      onSubmit={handleSubmit} />\n    <AccountDetails accountInfo={accountInfo}/>\n  </DefaultLayout>\n}\n\nexport default AuthenticationPage","import axios from \"axios\";\nimport {useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioMessages = () => {\n\n  const [authentication] = useAuthentication()\n\n  const request = async ({phoneNumber}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/Messages.json`\n    let result = []\n       const fromResult = await axios.get(url,\n        {\n          auth: { username: authentication.accountSid, password: authentication.authToken },\n          params: {From: phoneNumber}\n        })\n      const toResult = await axios.get(url,\n        {\n          auth: { username: authentication.accountSid, password: authentication.authToken },\n          params: {To: phoneNumber}\n        })\n      result = result\n        .concat(fromResult.data.messages)\n        .concat(toResult.data.messages)\n    const sortByDate = (a,b) => Date.parse(a.date_created) > Date.parse(b.date_created) ? -1 : 1\n    return result.sort(sortByDate)\n  }\n\n  return request\n}\n\nexport default useGetTwilioMessages","import {LoadingOutlined} from \"@ant-design/icons\";\n\nexport const Loading = () => <>\n  <div className=\"text-center message-list-loading-container\">\n    <LoadingOutlined className=\"message-list-loading text-primary\" />\n  </div>\n</>\n","import {CopyTwoTone, RightCircleFilled} from \"@ant-design/icons\";\nimport \"./MessageCard.css\";\n\nconst toBaseDirection = direction => direction.includes('inbound') ? 'inbound' : 'outbound'\nconst messageLabelClass = direction => `message-card-label text-code text-small ${toBaseDirection(direction)}`\nconst messageLabelRotation = direction => toBaseDirection(direction) === 'inbound' ? 180 : 0\nconst copyStyle = {padding: '0', margin: '0'}\n\nconst toDateString = (date) => {\n  const d = new Date(date)\n  return `${d.toDateString()} ${d.toLocaleTimeString()}`\n}\n\nconst copyToClipboard = (s) => {\n  navigator.clipboard.writeText(s).then(() => console.log('msg copied')).catch(() => console.log('meh'))\n}\n\nconst CopyToClipboard = ({txt}) => <>\n  <div className=\"tooltip message-card-copy-btn\" data-tooltip=\"Copy to clipboard\" onClick={() => copyToClipboard(txt)}>\n    <CopyTwoTone twoToneColor=\"#5755d9\" style={copyStyle}/>\n  </div>\n</>\n\nconst MessageCard = ({messageSid='', direction='', from='', to='',\n                      date=new Date(), status='', body=''}) => {\n\n  return <>\n    <div className=\"message-card\">\n      <div className={messageLabelClass(direction)}>\n        <RightCircleFilled rotate={messageLabelRotation(direction)} />\n      </div>\n      <div>\n        <div className=\"message-card-header text-tiny\">\n        <span>\n          <CopyToClipboard txt={from}/>\n          <strong>From:</strong> {from}\n        </span>\n          <span>\n          <CopyToClipboard txt={to}/>\n          <strong>To:</strong> {to}\n        </span>\n          <span className=\"message-card-header-status\">\n          <strong>Status:</strong> {status}\n        </span>\n          <span>\n          <strong>Direction:</strong> {direction}\n        </span>\n        </div>\n        <div className=\"message-card-body text-code text-small\">\n          {body}\n        </div>\n        <div className=\"message-card-footer text-tiny\">\n          <strong>Date: </strong>{toDateString(date)}\n          <span>\n            <strong>MessageSid: </strong>{messageSid}\n          </span>\n        </div>\n      </div>\n    </div>\n  </>\n}\n\nexport default MessageCard\n","import {useCallback, useEffect, useState} from \"react\";\nimport useGetTwilioMessages from \"../../hook/useGetTwilioMessages\";\nimport {Loading} from \"./MessageListView\";\nimport MessageCard from \"../MessageCard/MessageCard\";\n\nconst MessageList = ({phoneNumber = '', onComplete = () => {}, onError = () => {}}) => {\n  const [loading, setLoading] = useState(true)\n  const [messages, setMessages] = useState([])\n  const [hasMounted, setHasMounted] = useState(false)\n  const [previousPhoneNumber, setPreviousPhoneNumber] = useState(null)\n\n  const handleSuccess = useCallback((response) => {\n    const messagesMapped = response\n      .map(v => ({\n        messageSid: v.sid,\n        direction: v.direction,\n        from: v.from,\n        to: v.to,\n        date: v.date_created,\n        status: v.status,\n        body: v.body\n      }))\n    setMessages(messagesMapped)\n    setLoading(false)\n  }, [setMessages, setLoading])\n\n  const getMessages = useGetTwilioMessages({\n    onSuccess: handleSuccess,\n    onComplete: onComplete,\n    onError: onError\n  })\n\n  useEffect(() => {\n    setHasMounted(true)\n  }, [setHasMounted])\n\n  useEffect(() => {\n    if (hasMounted && (phoneNumber?.length > 0 && previousPhoneNumber !== phoneNumber)) {\n      getMessages({phoneNumber: phoneNumber}).then(handleSuccess).catch(onError).then(onComplete)\n      setPreviousPhoneNumber(phoneNumber)\n      setLoading(true)\n    }\n  }, [hasMounted, phoneNumber, previousPhoneNumber, getMessages, messages, handleSuccess, onError, onComplete, setPreviousPhoneNumber, setLoading])\n\n  if (loading) return <Loading/>\n\n  return messages.map(v =>\n    <MessageCard\n      key={v.messageSid}\n      messageSid={v.messageSid}\n      from={v.from}\n      to={v.to}\n      body={v.body}\n      direction={v.direction}\n      status={v.status}\n      date={v.date}\n    />)\n}\n\nexport default MessageList\n","import axios from \"axios\";\nimport {useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useSendTwilioMessage = ({ onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const [authentication] = useAuthentication()\n\n  const request = ({to, from, body}) => {\n    const data = new URLSearchParams()\n    data.append('To', to)\n    data.append('From', from)\n    data.append('Body', body)\n\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/Messages.json`\n    axios.post(url, data , {\n        auth: {\n          username: authentication.accountSid,\n          password: authentication.authToken\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return request\n}\n\nexport default useSendTwilioMessage","const SuccessLabel = ({text}) => {\n  if (text !== null && text.length > 0) {\n    return <span className=\"label label-success\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {text}\n    </span>\n  }\n  return null\n}\n\nexport default SuccessLabel","import {useState} from \"react\";\n\nconst TextAreaField = ({ name='',\n                         value='',\n                         placeholder='Placeholder',\n                         label='Label',\n                         validation=()=>{},\n                         invalidHint='Invalid value',\n                         isRequired=false,\n                         isEnabled=true,\n                         rows = 3,\n                         onChange=()=>{}}) => {\n  const [isPristine, setPristine] = useState(true);\n  const isValid = () => {\n    try {\n      return validation(value) !== null\n    } catch (err) {\n      return false\n    }\n  }\n  const labelClass = `form-label ${ isPristine || isValid() ? '' : 'has-error'}`\n  const showInvalid = !isPristine && !isValid()\n  return <label className={labelClass}>{label}:{isRequired && <sup className=\"text-error\">&lowast; </sup>}\n    <textarea\n      className=\"form-input\"\n      name={name}\n      placeholder={placeholder}\n      required={isRequired}\n      value={value}\n      rows={rows}\n      disabled={!isEnabled}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={() => setPristine(false)}>\n    </textarea>\n    {showInvalid && <span className=\"form-input-hint\">{invalidHint}</span>}\n    {!showInvalid && <span className=\"form-input-hint\">{placeholder}</span>}\n  </label>\n}\n\nexport default TextAreaField","import {useState} from \"react\";\nimport \"./MessageComposer.css\"\nimport useSendTwilioMessage from \"../../hook/useSendTwilioMessage\";\nimport SuccessLabel from \"../SuccessLabel/SuccessLabel\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport InputField from \"../InputField/InputField\";\nimport TextAreaField from \"../TextAreaField/TextAreaField\";\n\nconst MessageComposer = ({phoneNumber = ''}) => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [isMessageSent, setMessageSent] = useState(false)\n  const [to, setTo] = useState('')\n  const [message, setMessage] = useState('')\n  const toValidationPattern = '^\\\\+\\\\d{11}'\n  const messageValidationPattern = '[\\\\w\\\\d]{3,}'\n\n  const handleSendMessageSuccess = (response) => {\n    setMessageSent(true)\n    setTimeout(()=> setMessageSent(false), 5000)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleMessageSentComplete = () => {\n    setLoading(false)\n  }\n\n  const sendMessage = useSendTwilioMessage({\n    onSuccess: handleSendMessageSuccess,\n    onError: handleError,\n    onComplete: handleMessageSentComplete\n  })\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    sendMessage({to: to, from: phoneNumber, body: message})\n  }\n\n  const handleToChange = (v) => {\n    if (v.length > 0) {\n      v = '+' + v.replace(/\\D/g, '')\n    }\n    if (v.length < 13) {\n      setTo(v)\n    }\n  }\n\n  const handleMessageChange = (v) => {\n    if (v.length < 200) {\n      setMessage(v)\n    }\n  }\n\n  return <div>\n    <ErrorLabel error={error}/>\n    <form className=\"form-group\" onSubmit={handleOnSubmit}>\n      <fieldset disabled={loading}>\n        <InputField\n          label=\"To\"\n          type='tel'\n          value={to}\n          onChange={handleToChange}\n          validation={v => v.match(toValidationPattern)}\n          placeholder=\"Recipient's phone number\"\n          invalidHint=\"Phone number is invalid, it must contain the country code followed by 10 digits\"\n          isRequired={true}\n        />\n        <TextAreaField\n          label=\"Message\"\n          value={message}\n          isRequired={true}\n          placeholder={`Enter the message to sent to: ${to} from: ${phoneNumber}`}\n          validHint={`This message is going to be sent to: ${to} from: ${phoneNumber}`}\n          invalidHint=\"Invalid message, it must be between 3 and 200 characters\"\n          rows='3'\n          validation={v => v.match(messageValidationPattern)}\n          onChange={handleMessageChange}\n        />\n      </fieldset>\n      <div className=\"text-center m-2\">\n        <button className={`message-composer-submit btn btn-primary ${loading ? 'loading' : ''}`} type=\"submit\">Send</button>\n      </div>\n    </form>\n    <div className=\"text-center\">\n      {isMessageSent && <SuccessLabel text=\"Message sent successfully.\"/>}\n    </div>\n  </div>\n}\n\nexport default MessageComposer","import \"./MessagesPage.css\"\nimport MessageList from \"../MessageList/MessageList\";\nimport MessageComposer from \"../MessageComposer/MessageComposer\";\nimport {useState} from \"react\";\n\nexport const Tabs = ({phoneNumber=''}) => {\n  const [activeTab, setActiveTab] = useState('messages')\n  const handleActivateMessages = () => setActiveTab('messages')\n  const handleActivateComposer = () => setActiveTab('composer')\n  const isMessagesActive = activeTab === 'messages'\n  const isComposerActive = activeTab === 'composer'\n  const messagesTabClass = `tab-item messages-page-tabs-area ${isMessagesActive ? 'active' : ''}`\n  const composerTabClass = `tab-item messages-page-tabs-area ${isComposerActive ? 'active' : ''}`\n\n  return <>\n    <div className=\"messages-page-tabs-container\">\n      <div className=\"messages-page-tabs-content\">\n        <ul className=\"tab tab-block\">\n          <li className={messagesTabClass} onClick={handleActivateMessages}>\n            Messages\n          </li>\n          <li className={composerTabClass} onClick={handleActivateComposer}>\n            Composer\n          </li>\n        </ul>\n      </div>\n    </div>\n    {isMessagesActive && <MessageList phoneNumber={phoneNumber}/>}\n    {isComposerActive && <MessageComposer phoneNumber={phoneNumber}/>}\n  </>\n}","import axios from \"axios\";\nimport {useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioPhoneNumbers = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const [authentication] = useAuthentication()\n\n  const getPhoneNumbers = () => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/IncomingPhoneNumbers.json?Beta=false`\n    axios.get(url,\n      {\n        auth: { username: authentication.accountSid, password: authentication.authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getPhoneNumbers\n}\n\nexport default useGetTwilioPhoneNumbers","import Select from 'react-select'\nimport {useEffect, useState} from \"react\";\nimport useGetTwilioPhoneNumbers from \"../../hook/useGetTwilioPhoneNumbers\";\nimport \"./PhoneNumberSelector.css\"\n\nconst PhoneNumberSelector = ({ onError = () => {},\n                               onComplete = () => {},\n                               onPhoneNumberChange = () => {}}) => {\n  const [loading, setLoading] = useState(true);\n  const [phoneNumbers, setPhoneNumbers] = useState([])\n\n  const handleOnComplete = () => {\n    setLoading(false)\n    onComplete()\n  }\n\n  const handleOnChange = (event) => {\n    onPhoneNumberChange(event.value)\n  }\n\n  const handleGetPhoneNumberSuccess = (response) => {\n    const result = response?.data?.incoming_phone_numbers\n      .filter(pn => pn.capabilities.sms)\n      .map(pn => pn.phone_number)\n      .sort()\n    setPhoneNumbers(result)\n  }\n\n  const getPhoneNumbers = useGetTwilioPhoneNumbers({\n    onSuccess: handleGetPhoneNumberSuccess,\n    onError: onError,\n    onComplete: handleOnComplete\n  })\n\n  // TODO: Currently, this mask is limited to country code +1; we need a mask for all country codes\n  const maskPhoneNumber = v => {\n    let result = v.substr(0, 2)\n    result += ' ' + v.substr(2, 3)\n    result += ' ' + v.substr(5, 3)\n    result += ' ' + v.substr(8)\n    return result\n  }\n\n  const phoneNumberOptions = phoneNumbers.map(v => ({value: v, label: maskPhoneNumber(v)}))\n\n  const placeHolderText = loading ? 'Loading phone numbers...' : 'Select (or type) a phone number...'\n\n  // Get available phone number on first render\n  useEffect(() => {\n    if (phoneNumbers.length === 0) {\n      getPhoneNumbers()\n    }\n  }, [getPhoneNumbers, phoneNumbers])\n\n  return <Select\n      placeholder={placeHolderText}\n      isLoading={loading}\n      options={phoneNumberOptions}\n      onChange={handleOnChange}\n  />\n}\n\nexport default PhoneNumberSelector\n","import {useState} from \"react\";\nimport {Tabs} from \"./MessagesPageView\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useHistory} from \"react-router-dom\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport PhoneNumberSelector from \"../PhoneNumberSelector/PhoneNumberSelector\";\n\nconst EMPTY_PHONE_NUMBER = ''\n\nconst MessagesPage = () => {\n  const [error, setError] = useState(null)\n  const [phoneNumber, setPhoneNumber] = useState(EMPTY_PHONE_NUMBER)\n  const [authentication] = useAuthentication()\n  const history = useHistory()\n\n  // TODO: Move this to a router guard\n  if (!authentication?.accountSid) {\n    history.push('/authentication')\n    return null\n  }\n\n  const handleError = (err) => setError(err)\n\n  const handlePhoneNumberChange = (v) => setPhoneNumber(v)\n\n  const isPhoneNumberSelected = phoneNumber !== EMPTY_PHONE_NUMBER\n\n  return <DefaultLayout>\n    <h4>Messages</h4>\n    <ErrorLabel error={error}/>\n    <PhoneNumberSelector onError={handleError} onPhoneNumberChange={handlePhoneNumberChange}/>\n    {isPhoneNumberSelected && <Tabs phoneNumber={phoneNumber}/>}\n  </DefaultLayout>\n}\n\nexport default MessagesPage\n","/*\n * Spectre CSS Imports\n * See: https://picturepan2.github.io/spectre/getting-started/installation.html\n */\nimport 'spectre.css/dist/spectre.min.css'\nimport 'spectre.css/dist/spectre-exp.css'\nimport 'spectre.css/dist/spectre-icons.css'\n\nimport './App.css'\n\nimport React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport {AuthenticationProvider} from \"./context/AuthenticationProvider\";\nimport AuthenticationPage from \"./component/AuthenticationPage/AuthenticationPage\"\nimport MessagesPage from \"./component/MessagesPage/MessagesPage\"\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AuthenticationProvider>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={AuthenticationPage}/>\n            <Route path=\"/authentication\" component={AuthenticationPage}/>\n            <Route path=\"/phone-numbers\" component={MessagesPage}/>\n          </Switch>\n        </HashRouter>\n      </AuthenticationProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}