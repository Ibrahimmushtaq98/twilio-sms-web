{"version":3,"sources":["context/AuthenticationProvider.jsx","hook/useGetTwilioAccounts.js","component/ErrorHeader/ErrorHeader.jsx","component/LoadingHeader/LoadingHeader.jsx","component/AuthenticationPage/AuthenticationPage.jsx","component/PhoneNumbersPage/PhoneNumbersPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AuthenticationReadContext","React","createContext","AuthenticationWriteContext","useAuthentication","useContext","AuthenticationProvider","children","useState","value","setValue","Provider","v","useGetTwilioAccounts","onSuccess","onError","onComplete","accountSid","authToken","axios","get","auth","username","password","then","response","catch","error","ErrorHeader","Error","name","message","String","LoadingHeader","loading","AuthenticationPage","history","useHistory","accountInfo","setAccountInfo","setAccountSid","setAuthToken","setLoading","setError","setAuthentication","getTwilioAccounts","account","data","accounts","find","element","sid","info","friendly_name","type","status","dateCreated","date_created","dateUpdated","date_updated","err","AccountDetails","Object","keys","length","onSubmit","event","preventDefault","onChange","e","target","onClick","push","PhoneNumbersPage","authentication","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c7b339d.chunk.js","sourcesContent":["import React, {useContext, useState} from \"react\";\n\nconst AuthenticationReadContext = React.createContext({})\nconst AuthenticationWriteContext = React.createContext(() => {})\n\nexport const useAuthentication = () => {\n  const value = useContext(AuthenticationReadContext)\n  const setValue = useContext(AuthenticationWriteContext)\n  return [value, setValue]\n}\n\nexport const AuthenticationProvider = ({children}) => {\n  const [value, setValue] = useState({})\n  return (\n    <AuthenticationReadContext.Provider value={value}>\n      <AuthenticationWriteContext.Provider value={v => setValue(v)}>\n        {children}\n      </AuthenticationWriteContext.Provider>\n    </AuthenticationReadContext.Provider>\n  )\n}\n","import axios from \"axios\";\n\nconst useGetTwilioAccounts = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n  const getAccounts = ({accountSid, authToken}) => {\n    axios.get('https://api.twilio.com/2010-04-01/Accounts.json',\n      {\n        auth: { username: accountSid, password: authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getAccounts\n}\n\nexport default useGetTwilioAccounts","const ErrorHeader = ({error}) => {\n  const toString = () => {\n    if (error instanceof Error) {\n      return `${error.name}: ${error.message}`\n    }\n    return String(error)\n  }\n\n  if (error) {\n    return <div>{toString(error)}</div>\n  }\n\n  return null\n}\n\nexport default ErrorHeader","const LoadingHeader = ({loading = false}) => {\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  return null\n}\n\nexport default LoadingHeader","import {useHistory} from \"react-router-dom\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useState} from \"react\";\nimport useGetTwilioAccounts from \"../../hook/useGetTwilioAccounts\";\nimport ErrorHeader from \"../ErrorHeader/ErrorHeader\";\nimport LoadingHeader from \"../LoadingHeader/LoadingHeader\";\n\nconst AuthenticationPage = () => {\n  const history = useHistory()\n  const [accountInfo, setAccountInfo] = useState({})\n  const [accountSid, setAccountSid] = useState('')\n  const [authToken, setAuthToken] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [, setAuthentication] = useAuthentication()\n\n  const navigateToPhoneNumbersPage = (event) => {\n    event.preventDefault()\n    history.push('/phone-numbers')\n  }\n\n  const handleGetAccountsSuccess = (response) => {\n    const account = response.data.accounts.find(element => element.sid === accountSid)\n    const info = {\n      name: account.friendly_name,\n      type: account.type,\n      status: account.status,\n      dateCreated: account.date_created,\n      dateUpdated: account.date_updated,\n    }\n    setAccountInfo(info)\n  }\n\n  const handleGetAccountsComplete = () => {\n    setLoading(false)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    setAuthentication({accountSid, authToken})\n    getTwilioAccounts({accountSid, authToken})\n  }\n\n  const getTwilioAccounts = useGetTwilioAccounts({\n    onSuccess: handleGetAccountsSuccess,\n    onError: handleError,\n    onComplete: handleGetAccountsComplete\n  })\n\n  const AccountDetails = () => {\n    if (Object.keys(accountInfo).length === 0) return null\n    return <div>\n      <p>Account Details</p>\n      <p>Name: {accountInfo.name}</p>\n      <p>Type: {accountInfo.type}</p>\n      <p>Status: {accountInfo.status}</p>\n      <p>Date Created: {accountInfo.dateCreated}</p>\n      <p>Date Updated: {accountInfo.dateUpdated}</p>\n    </div>\n  }\n\n  return <>\n    <ErrorHeader error={error}/>\n    <LoadingHeader loading={loading}/>\n    <form onSubmit={handleSubmit}>\n      <label>AccountSid<input type=\"text\" name=\"AccountSid\" onChange={e => setAccountSid(e.target.value)}/></label>\n      <label>Auth Token<input type=\"text\" name=\"AuthToken\" onChange={e => setAuthToken(e.target.value)}/></label>\n      <button onClick={navigateToPhoneNumbersPage}>Phone Numbers</button>\n      <button type=\"submit\">Authenticate</button>\n    </form>\n    <AccountDetails/>\n  </>\n}\n\nexport default AuthenticationPage","import {useHistory} from \"react-router-dom\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\n\nconst PhoneNumbersPage = () => {\n  const history = useHistory()\n  const [authentication] = useAuthentication()\n  const navigateToAuthenticationPage = () => history.push('/authentication')\n\n  return <>\n    Phone Numbers using Account SID: {authentication.accountSid} and Auth Token: {authentication.authToken}\n    <button onClick={navigateToAuthenticationPage}>Authenticate</button>\n  </>\n}\n\nexport default PhoneNumbersPage","import './App.css'\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, HashRouter\n} from \"react-router-dom\";\n\nimport {AuthenticationProvider} from \"./context/AuthenticationProvider\";\nimport AuthenticationPage from \"./component/AuthenticationPage/AuthenticationPage\"\nimport PhoneNumbersPage from \"./component/PhoneNumbersPage/PhoneNumbersPage\"\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AuthenticationProvider>\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={AuthenticationPage}/>\n          <Route path=\"/authentication\" component={AuthenticationPage}/>\n          <Route path=\"/phone-numbers\" component={PhoneNumbersPage}/>\n        </Switch>\n      </HashRouter>\n      </AuthenticationProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}