{"version":3,"sources":["context/AuthenticationProvider.jsx","hook/useGetTwilioAccount.js","component/ErrorLabel/ErrorLabel.jsx","component/DefaultLayout/DefaultLayout.jsx","component/AuthenticationPage/AuthenticationPageView.jsx","component/AuthenticationPage/AuthenticationPage.jsx","hook/useGetTwilioPhoneNumbers.js","component/PhoneNumberSelector/PhoneNumberSelector.jsx","hook/useGetTwilioMessages.js","component/MessageList/MessageList.jsx","component/MessagesPage/MessagesPageView.jsx","component/MessagesPage/MessagesPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["AuthenticationReadContext","React","createContext","AuthenticationWriteContext","useAuthentication","useContext","AuthenticationProvider","children","useState","value","setValue","Provider","v","useGetTwilioAccount","onSuccess","onError","onComplete","accountSid","authToken","url","axios","get","auth","username","password","then","response","catch","error","ErrorLabel","className","style","padding","margin","Error","name","message","String","DefaultLayout","history","useHistory","onClick","push","href","target","rel","GithubOutlined","marginTop","AuthenticationPageView","accountInfo","loading","onAccountSidChange","onAuthTokenChange","onSubmit","AccountDetails","Object","keys","length","marginBottom","type","status","dateCreated","dateUpdated","loadingClass","onChange","e","disabled","placeholder","AuthenticationPage","authentication","setAuthentication","setAccountInfo","setAccountSid","setAuthToken","setLoading","setError","getTwilioAccount","info","data","friendly_name","date_created","date_updated","err","event","preventDefault","useGetTwilioPhoneNumbers","Loading","LoadingOutlined","PhoneNumberSelector","onPhoneNumberChange","phoneNumber","setPhoneNumber","phoneNumbers","setPhoneNumbers","handleOnChange","getPhoneNumbers","result","incoming_phone_numbers","filter","pn","capabilities","sms","map","phone_number","sort","useEffect","Content","size","hidden","ph","useGetTwilioMessages","from","params","From","MessageList","fromPhoneNumber","messages","setMessages","hasMounted","setHasMounted","previousPhoneNumber","setPreviousPhoneNumber","getMessages","messagesMapped","messageSid","sid","direction","to","date","body","MessagePanel","Date","toLocaleString","Tabs","MessagesPageView","loadingPhoneNumbers","MessagesPage","setFromPhoneNumber","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c76bb074.chunk.js","sourcesContent":["import React, {useContext, useState} from \"react\";\n\nconst AuthenticationReadContext = React.createContext({})\nconst AuthenticationWriteContext = React.createContext(() => {})\n\nexport const useAuthentication = () => {\n  const value = useContext(AuthenticationReadContext)\n  const setValue = useContext(AuthenticationWriteContext)\n  return [value, setValue]\n}\n\nexport const AuthenticationProvider = ({children}) => {\n  const [value, setValue] = useState({})\n  return (\n    <AuthenticationReadContext.Provider value={value}>\n      <AuthenticationWriteContext.Provider value={v => setValue(v)}>\n        {children}\n      </AuthenticationWriteContext.Provider>\n    </AuthenticationReadContext.Provider>\n  )\n}\n","import axios from \"axios\";\n\nconst useGetTwilioAccount = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n  const getAccount = ({accountSid, authToken}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}.json`\n    axios.get(url,\n      {\n        auth: { username: accountSid, password: authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getAccount\n}\n\nexport default useGetTwilioAccount","const ErrorLabel = ({error}) => {\n  const toString = () => {\n    if (error instanceof Error) {\n      return `${error.name}: ${error.message}`\n    }\n    return `Error: ${String(error)}`\n  }\n\n  if (error) {\n    return <span className=\"label label-error\" style={{padding: '.5em', margin: '.5em 0em .5em 0em'}}>\n      {toString(error)}\n    </span>\n  }\n\n  return null\n}\n\nexport default ErrorLabel","import { GithubOutlined } from '@ant-design/icons';\nimport { useHistory } from \"react-router-dom\";\n\nconst DefaultLayout = ({children}) => {\n  const history = useHistory()\n\n  const navigateToAuthenticationPage = () => {\n    history.push('/authentication')\n  }\n  const navigateToPhoneNumbersPage = () => {\n    history.push('/phone-numbers')\n  }\n\n  return (\n    <>\n      <div className=\"container grid-lg\">\n        <header className=\"navbar bg-primary\" style={{padding: '.5em'}}>\n          <section className=\"navbar-section\">\n            <span className=\"btn btn-link text-light\" onClick={navigateToAuthenticationPage}>Authentication</span>\n            <span className=\"btn btn-link text-light\" onClick={navigateToPhoneNumbersPage}>Messages</span>\n          </section>\n          <section className=\"navbar-center\">\n            <span className=\"h5\">Twilio SMS Web</span>\n          </section>\n          <section className=\"navbar-section\">\n            <a className=\"btn btn-link text-light\" href=\"https://github.com/rafasantos/twilio-sms-web\" target=\"_blank\" rel=\"noreferrer\">\n              GitHub <GithubOutlined/>\n            </a>\n          </section>\n        </header>\n      </div>\n      <div className=\"container grid-lg text-left\" style={{marginTop: '1em'}}>\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default DefaultLayout","import ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\n\nconst AuthenticationPageView = ({ accountInfo = {},\n                                  accountSid = '',\n                                  authToken = '',\n                                  error = null,\n                                  loading = false,\n                                  onAccountSidChange = () => {},\n                                  onAuthTokenChange = () => {},\n                                  onSubmit = () => {} }) => {\n\n  const AccountDetails = () => {\n    if (Object.keys(accountInfo).length === 0) return null\n    return (\n      <div className=\"flex-centered\" style={{marginTop: '2em'}}>\n        <div className=\"card\">\n          <div className=\"card-header bg-success text-center\">\n            <h6>Authentication Success</h6>\n          </div>\n          <div className=\"card-body\">\n            <p className=\"text-small\" style={{marginBottom: '.5em'}}>You are authenticated with the following account:</p>\n            <span className=\"text-bold\">Name: </span>{accountInfo.name}<br/>\n            <span className=\"text-bold\">Type: </span>{accountInfo.type}<br/>\n            <span className=\"text-bold\">Status: </span>{accountInfo.status}<br/>\n            <span className=\"text-bold\">Created: </span>{accountInfo.dateCreated}<br/>\n            <span className=\"text-bold\">Updated: </span>{accountInfo.dateUpdated}<br/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const loadingClass = loading ? 'loading' : ''\n\n  return (\n    <DefaultLayout>\n      <h4>Authentication</h4>\n      <ErrorLabel error={error}/>\n      <form onSubmit={onSubmit}>\n        <label className=\"form-label\">Account SID\n          <input className=\"form-input\" type=\"text\" name=\"AccountSid\"\n                 value={accountSid}\n                 onChange={e => onAccountSidChange(e.target.value)}\n                 disabled={loading} placeholder=\"See Twilio console 'Account SID' \"\n          />\n        </label>\n        <label className=\"form-label\">Auth Token\n          <input className=\"form-input\" type=\"password\" name=\"AuthToken\"\n                 value={authToken}\n                 onChange={e => onAuthTokenChange(e.target.value)}\n                 disabled={loading} placeholder=\"See Twilio console 'Auth Token'\"\n          />\n        </label>\n        <div className=\"text-center m-2\">\n          <button className={`btn btn-primary ${loadingClass}`} type=\"submit\">Authenticate</button>\n        </div>\n      </form>\n      <AccountDetails/>\n    </DefaultLayout>\n  )\n}\n\nexport default AuthenticationPageView","import {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useState} from \"react\";\nimport useGetTwilioAccount from \"../../hook/useGetTwilioAccount\";\nimport AuthenticationPageView from \"./AuthenticationPageView\";\n\nconst AuthenticationPage = () => {\n  const [authentication, setAuthentication] = useAuthentication()\n  const [accountInfo, setAccountInfo] = useState(authentication.accountInfo)\n  const [accountSid, setAccountSid] = useState(authentication.accountSid)\n  const [authToken, setAuthToken] = useState(authentication.authToken)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const handleGetAccountsSuccess = (response) => {\n    const info = {\n      name: response.data.friendly_name,\n      type: response.data.type,\n      status: response.data.status,\n      dateCreated: response.data.date_created,\n      dateUpdated: response.data.date_updated,\n    }\n    setAccountInfo(info)\n    setAuthentication({accountSid, authToken, accountInfo: info})\n  }\n\n  const handleGetAccountsComplete = () => {\n    setLoading(false)\n  }\n\n  const handleError = (err) => {\n    setError(err)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    getTwilioAccount({accountSid, authToken})\n  }\n\n  const getTwilioAccount = useGetTwilioAccount({\n    onSuccess: handleGetAccountsSuccess,\n    onError: handleError,\n    onComplete: handleGetAccountsComplete\n  })\n\n  return <AuthenticationPageView\n    accountInfo={accountInfo}\n    accountSid={accountSid}\n    authToken={authToken}\n    error={error}\n    loading={loading}\n    onAccountSidChange={v => setAccountSid(v)}\n    onAuthTokenChange={v => setAuthToken(v)}\n    onSubmit={handleSubmit}\n  />\n}\n\nexport default AuthenticationPage","import axios from \"axios\";\nimport {useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioPhoneNumbers = ({onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const [authentication] = useAuthentication()\n\n  const getPhoneNumbers = () => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/IncomingPhoneNumbers.json?Beta=false`\n    axios.get(url,\n      {\n        auth: { username: authentication.accountSid, password: authentication.authToken }\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return getPhoneNumbers\n}\n\nexport default useGetTwilioPhoneNumbers","import {useEffect, useState} from \"react\";\nimport {LoadingOutlined} from \"@ant-design/icons\";\nimport useGetTwilioPhoneNumbers from \"../../hook/useGetTwilioPhoneNumbers\";\nimport \"./PhoneNumberSelector.css\"\n\nconst Loading = () => <>\n  <div className=\"text-center loading-phone-number-container\">\n    <LoadingOutlined\n      className=\"text-primary loading-phone-number\"/>\n  </div>\n</>\n\nconst PhoneNumberSelector = ({ onError = () => {},\n                               onComplete = () => {},\n                               onPhoneNumberChange = () => {}}) => {\n  const [loading, setLoading] = useState(true);\n  const [phoneNumber, setPhoneNumber] = useState('')\n  const [phoneNumbers, setPhoneNumbers] = useState([])\n\n  const handleOnComplete = () => {\n    setLoading(false)\n    onComplete()\n  }\n\n  const handleOnChange = (event) => {\n    setPhoneNumber(event.target.value)\n    onPhoneNumberChange(event.target.value)\n  }\n\n  const handleGetPhoneNumberSuccess = (response) => {\n    const result = response?.data?.incoming_phone_numbers\n      .filter(pn => pn.capabilities.sms)\n      .map(pn => pn.phone_number)\n      .sort()\n    setPhoneNumbers(result)\n  }\n\n  const getPhoneNumbers = useGetTwilioPhoneNumbers({\n    onSuccess: handleGetPhoneNumberSuccess,\n    onError: onError,\n    onComplete: handleOnComplete\n  })\n\n  useEffect(() => {\n    if (phoneNumbers.length === 0) {\n      getPhoneNumbers()\n    }\n  }, [getPhoneNumbers, phoneNumbers])\n\n  const Content = () => <>\n    <div className=\"phone-number-container\">\n      <div className=\"text-center phone-number-label\">\n        Phone numbers:\n      </div>\n      <div className=\"form-group\">\n        <div>\n          <select\n            className=\"form-select phone-number-select\"\n            size=\"5\"\n            value={phoneNumber}\n            onChange={handleOnChange}>\n            <option value=\"\" hidden>Select a phone number</option>\n            {phoneNumbers.map(ph => <option key={ph}>{ph}</option>)}\n          </select>\n          <div className=\"text-small text-center\">Total: {phoneNumbers.length}</div>\n        </div>\n      </div>\n    </div>\n  </>\n\n  return <>\n    {loading && <Loading/>}\n    {!loading && <Content/>}\n  </>\n}\n\nexport default PhoneNumberSelector","import axios from \"axios\";\nimport {useAuthentication} from \"../context/AuthenticationProvider\";\n\nconst useGetTwilioMessages = ({ onSuccess = () => {},\n                                onError = () => {},\n                                onComplete = () => {}\n                              }) => {\n\n  const [authentication] = useAuthentication()\n\n  const request = ({from}) => {\n    const url = `https://api.twilio.com/2010-04-01/Accounts/${authentication.accountSid}/Messages.json`\n    axios.get(url,\n      {\n        auth: { username: authentication.accountSid, password: authentication.authToken },\n        params: {From: from}\n      })\n      .then(response => onSuccess(response))\n      .catch(error => onError(error))\n      .then(() => onComplete())\n  }\n\n  return request\n}\n\nexport default useGetTwilioMessages","import {useEffect, useState} from \"react\";\nimport useGetTwilioMessages from \"../../hook/useGetTwilioMessages\";\nimport \"./MessageList.css\";\nimport {LoadingOutlined} from \"@ant-design/icons\";\n\nconst Loading = () => <>\n  <div className=\"text-center message-list-loading-container\">\n    <LoadingOutlined className=\"message-list-loading text-primary\" />\n  </div>\n</>\n\nconst MessageList = ({fromPhoneNumber = null, onComplete = () => {}, onError = () => {}}) => {\n  const [loading, setLoading] = useState(true)\n  const [messages, setMessages] = useState([])\n  const [hasMounted, setHasMounted] = useState(false)\n  const [previousPhoneNumber, setPreviousPhoneNumber] = useState(null);\n\n  const handleSuccess = (response) => {\n    const messagesMapped = response?.data?.messages\n      .map(v => ({\n        messageSid: v.sid,\n        direction: v.direction,\n        from: v.from,\n        to: v.to,\n        date: v.date_created,\n        status: v.status,\n        body: v.body\n      }))\n    setMessages(messagesMapped)\n    setLoading(false)\n  }\n\n  const getMessages = useGetTwilioMessages({\n    onSuccess: handleSuccess,\n    onComplete: onComplete,\n    onError: onError\n  })\n\n  useEffect(() => {\n    setHasMounted(true)\n  }, [setHasMounted])\n\n  useEffect(() => {\n    if (hasMounted && (fromPhoneNumber?.length > 0 && previousPhoneNumber !== fromPhoneNumber)) {\n      getMessages({from: fromPhoneNumber})\n      setPreviousPhoneNumber(fromPhoneNumber)\n      setLoading(true)\n    }\n  }, [messages, hasMounted, getMessages, previousPhoneNumber, fromPhoneNumber, setLoading])\n\n  const MessagePanel = ({message}) => (\n    <div className=\"panel message-list-panel\">\n      <div className=\"panel-header text-small\">\n        <div className=\"message-list-header\">\n          <div><strong>from:</strong> {message.from}</div>\n          <div><strong>To:</strong> {message.to}</div>\n          <div><strong>Direction:</strong> {message.direction}</div>\n          <div><strong>Status:</strong> {message.status}</div>\n        </div>\n      </div>\n      <div className=\"panel-body text-code\">\n        {message.body}\n      </div>\n      <div className=\"panel-footer text-small text-gray\">\n        Date: {new Date(message.date)?.toLocaleString()}\n      </div>\n    </div>\n  )\n\n  if (loading) return <Loading/>\n\n  return messages.map(v => <MessagePanel key={v.messageSid}  message={v}/> )\n}\n\nexport default MessageList","import \"./MessagesPage.css\"\nimport ErrorLabel from \"../ErrorLabel/ErrorLabel\";\nimport PhoneNumberSelector from \"../PhoneNumberSelector/PhoneNumberSelector\";\nimport MessageList from \"../MessageList/MessageList\";\nimport DefaultLayout from \"../DefaultLayout/DefaultLayout\";\n\nconst Tabs = () => (\n  <div className=\"middle-tabs\">\n    <div className=\"middle-tabs-content\">\n      <ul className=\"tab tab-block\">\n        <li className=\"tab-item\">\n          <a href=\"#/phone-numbers\" className=\"active\">Messages</a>\n        </li>\n        <li className=\"tab-item\">\n          <a href=\"#/phone-numbers\" className=\"\">Compose</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n)\n\nconst MessagesPageView = ({ fromPhoneNumber = '',\n                            loadingPhoneNumbers = true,\n                            error = null,\n                            onError = () => {},\n                            onPhoneNumberChange = () =>{}}) => (\n  <DefaultLayout>\n    <h4>Messages</h4>\n    <ErrorLabel error={error}/>\n    <PhoneNumberSelector onError={onError} onPhoneNumberChange={onPhoneNumberChange}/>\n    {!loadingPhoneNumbers && <Tabs/>}\n    {!loadingPhoneNumbers && <MessageList fromPhoneNumber={fromPhoneNumber}/>}\n  </DefaultLayout>\n)\n\nexport default MessagesPageView","import {useState} from \"react\";\nimport MessagesPageView from \"./MessagesPageView\";\nimport {useAuthentication} from \"../../context/AuthenticationProvider\";\nimport {useHistory} from \"react-router-dom\";\n\nconst MessagesPage = () => {\n  const [error, setError] = useState(null)\n  const [fromPhoneNumber, setFromPhoneNumber] = useState('')\n  const [authentication] = useAuthentication()\n  const history = useHistory()\n\n  const handleError = (err) => setError(err)\n\n  const handlePhoneNumberChange = (v) => setFromPhoneNumber(v)\n\n  // TODO: Move this to a router guard\n  if (!authentication?.accountSid) {\n    history.push('/authentication')\n    return null\n  }\n\n  return <MessagesPageView\n    error={error}\n    fromPhoneNumber={fromPhoneNumber}\n    loadingPhoneNumbers={fromPhoneNumber.length === 0}\n    onError={handleError}\n    onPhoneNumberChange={handlePhoneNumberChange}\n  />\n}\n\nexport default MessagesPage","import './App.css'\n\nimport React from \"react\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport {AuthenticationProvider} from \"./context/AuthenticationProvider\";\nimport AuthenticationPage from \"./component/AuthenticationPage/AuthenticationPage\"\nimport MessagesPage from \"./component/MessagesPage/MessagesPage\"\n\n/*\n * Spectre CSS Imports\n * See: https://picturepan2.github.io/spectre/getting-started/installation.html\n */\nimport 'spectre.css/dist/spectre.min.css'\nimport 'spectre.css/dist/spectre-exp.css'\nimport 'spectre.css/dist/spectre-icons.css'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AuthenticationProvider>\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={AuthenticationPage}/>\n            <Route path=\"/authentication\" component={AuthenticationPage}/>\n            <Route path=\"/phone-numbers\" component={MessagesPage}/>\n          </Switch>\n        </HashRouter>\n      </AuthenticationProvider>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}